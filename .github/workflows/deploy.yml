name: Deploy

on:
  workflow_run:
    workflows: ["Build-and-Push"]
    types:
      - completed

env:
  REGISTRY: registry.digitalocean.com/vakaden
  APP_IMAGE_NAME: app

jobs:
  deploy:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:

      # Get the version from the triggering workflow
      - name: Get build version
        id: get_version
        run: echo "version=$(echo ${{ github.event.workflow_run.head_sha }} | head -c7)" >> $GITHUB_OUTPUT

      # Checkout repo to access docker-compose and api.env
      - name: Checkout code
        uses: actions/checkout@v3

      # Generate .env for deployment
      - name: Generate .env
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          echo "API_IMAGE=${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}:api-$VERSION" > .env
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}:frontend-$VERSION" >> .env

      # Ensure remote folder exists
      - name: Ensure remote folder
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: mkdir -p ~/vakaden

      # Copy docker-compose, .env, and api.env
      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          source: |
            docker-compose.prod.yml
            .env
            api/api.env
          target: "~/vakaden/"

      # Deploy on the droplet
      - name: Deploy containers
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          script: |
            cd ~/vakaden

            # Optional: remove old unused images
            docker image prune -af || true

            # Pull latest images using .env
            docker compose --env-file .env -p vakaden -f docker-compose.prod.yml pull --no-parallel --quiet

            # Restart app with updated images
            docker compose --env-file .env -p vakaden -f docker-compose.prod.yml up -d --remove-orpha
