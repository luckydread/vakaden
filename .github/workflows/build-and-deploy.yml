name: CI and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version (e.g. v1.0.3)'
        required: true

env:
  REGISTRY: registry.digitalocean.com/vakaden
  API_IMAGE_NAME: api
  WEB_IMAGE_NAME: frontend  # Your folder is named frontend, so use this as the image name

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build API image
        run: docker build -t $REGISTRY/$API_IMAGE_NAME:${{ github.event.inputs.version }} -f ./api/Dockerfile ./api

      - name: Build Frontend image
        run: docker build -t $REGISTRY/$WEB_IMAGE_NAME:${{ github.event.inputs.version }} -f ./frontend/Dockerfile ./frontend

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Login to DigitalOcean Container Registry
        run: doctl registry login

      - name: Build API image
        run: docker build -t $REGISTRY/$API_IMAGE_NAME:${{ github.event.inputs.version }} -f ./api/Dockerfile ./api

      - name: Build Frontend image
        run: docker build -t $REGISTRY/$WEB_IMAGE_NAME:${{ github.event.inputs.version }} -f ./frontend/Dockerfile ./frontend

      - name: Push API image
        run: docker push $REGISTRY/$API_IMAGE_NAME:${{ github.event.inputs.version }}

      - name: Push Frontend image
        run: docker push $REGISTRY/$WEB_IMAGE_NAME:${{ github.event.inputs.version }}

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy on droplet via SSH
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd ~/app-directory
            export APP_VERSION=${{ github.event.inputs.version }}

            # Pull updated images with the new tag
            docker compose -f docker-compose.prod.yml pull

            # Recreate and start containers with the new images
            docker compose -f docker-compose.prod.yml up -d --remove-orphans
